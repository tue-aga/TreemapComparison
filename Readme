This repository contains the source code and data used for the paper: "Quantitative Comparison of Time-Dependent Treemaps". It heavily borrows from the source code from the paper "Stable Treemaps via Local Moves".
A more detailed explanation of the datasets, the intermediate output of the algorithms, and the figures in the paper can be found at https://eduardovernier.github.io/dynamic-treemap-resources-eurovis/docs/treemaps/datasets/.

Algorithms implemented:

Local Moves: 						M. Sondag, B. Speckmann, and K. Verbeek. Stable treemaps via local moves. IEEE Transactions on Visualization and Computer Graphics, 24(1):729–738, 2018.
Slice and Dice: 					B. Shneiderman. Tree visualization with tree-maps: a 2D space-filling approach. ACM Transactions on Graphics, 11(1):92–99, 1992
Squarified:  						Perceptual guidelines for creating rectangular treemaps. IEEE Transactions on Visualization and Computer Graphics, 16(6):990–998, 2010.
Approximation:  					An approximation algorithm for dissecting a rectangle into rectangles with specified areas. Discrete Applied Mathematics, 155(4):523–537, 2007
Strip: 								B. B. Bederson, B. Shneiderman, and M. Wattenberg. Ordered and quantum treemaps: Making effective use of 2D space to display hierarchies. ACM Trans. Graph., 21(4):833–854, 2002.
Pivot-by-(Middle,Split,Split-Size): B. Shneiderman and M. Wattenberg. Ordered treemap layouts. In Proc. IEEE Symp. on Information Visualization (InfoVis), pp. 73–78, 2001.
Split: 								B. Engdahl. Ordered and unordered treemap algorithms and their applications on handheld devices, 2005. MSc thesis, Tech. Report TRITA-NA-E05033, Dept. of Comp. Sci., Stockholm Royal Institute of Technology,Sweden.
Spiral: 							Y. Tu and H.-W. Shen. Visualizing changes of hierarchical data using treemaps. IEEE TVCG, 13(6):1286–1293, 2007.
Hilbert: 							S. Tak and A. Cockburn. Enhanced spatial stability with Hilbert and Moore treemaps. IEEE Transactions on Visualization and Computer Graphics,19(1):141–148, 2013.
Moore: 								S. Tak and A. Cockburn. Enhanced spatial stability with Hilbert and Moore treemaps. IEEE Transactions on Visualization and Computer Graphics,19(1):141–148, 2013.
Git:								Vernier E., Comba J., Telea A. A stable greedy insertion treemap algorithm for software evolution visualization. IEEE Conference on Graphics, Patterns and Images: 158-165, 2018


Original sources for the datasets included in this repository:

Worldbank. https://data.worldbank.org/indicator/. Accessed 04-07-2018
Github, extracted using SciTools: Understand static code analysis tool, 2017. https://scitools.com. Accessed 16-07-2018.
Movielens. F. M. Harper and J. A. Konstan. The movielens datasets: History and context. ACM Transactions on Interactive Intelligent Systems (TiiS), 5(4):19,2016. 
The Movie Database. Movie ratings by custom hierarchy. http://www.themoviedb.org. Accessed 10-02-2018.
Dutch Names. Meertens Instituut, KNAW. Nederlandse Voornamenbank. https://www.meertens.knaw.nl/nvb, 2013. Accessed on 30-05-2016.
UN Comtrade Database.  Accessed 15-02-2017.
ATP Tennis Rankings. https://github.com/JeffSackmann/tennis_atp. Accessed 03-07-2018.
USGS Earthquakes. https://earthquake.usgs.gov/earthquakes/browse/stats.php. Accessed 03-07-2018.











Very brief explanation of Main classes.

Visualiser: Use to gain a visual interface showing a treemap for the datasets for all algorithms.
Can specify additional treemaps in gui.java

DataSetClassifier: Use to classify additional datasets.

StatisticalParser: Use to generate the matrix table for all processed datasets.

BaseLineGenerator: Use to manually generate baselines for the specified folders.

Simulator: Use to generated treemaps for a folder of datasets.

IpeImporter: Use to visualise a .rect file as outputed from Simulator.



Pipeline for experiments:
1. Use Simulator to generate treemaps with -baseline enabled for baselines.
2. Use DataSetClassifier to classify the datasets.
3. Use StatisticalParse to generate the matrix plots and statistics.




